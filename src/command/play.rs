use crate::battle::{
    builder::{BattleBuilder, RandomOption},
    model::CharaConfig,
    rpg_core::PlayMode,
};
use crate::database::{
    playdata::Entity as PlaydataEntity,
    postgres_connect,
    save::{delete as userdata_delete, save, update_player, Entity},
};
use crate::setting::{
    i18n::i18n_text,
    setup::{config_parse_toml, Languages},
};
use anyhow::Context;
use once_cell::sync::Lazy;
use sea_orm::EntityTrait;
use serenity::framework::standard::macros::{command, group};
use serenity::framework::standard::{Args, CommandResult};
use serenity::model::channel::Message;
use serenity::model::channel::ReactionType;
use std::time::Duration;

pub fn battle_reactions() -> Vec<ReactionType> {
    let mut vec = Vec::new();
    vec.push(ReactionType::Unicode(BATTLE_PLAY.to_string()));
    vec.push(ReactionType::Unicode(BATTLE_GUARD.to_string()));
    vec.push(ReactionType::Unicode(BATTLE_ITEM.to_string()));
    vec.push(ReactionType::Unicode(BATTLE_SAVE.to_string()));
    vec
}

static BATTLEREACTIONS: Lazy<Vec<ReactionType>> = Lazy::new(|| {
    let mut vec = Vec::new();
    vec.push(ReactionType::Unicode(BATTLE_PLAY.to_string()));
    vec.push(ReactionType::Unicode(BATTLE_GUARD.to_string()));
    vec.push(ReactionType::Unicode(BATTLE_ITEM.to_string()));
    vec.push(ReactionType::Unicode(BATTLE_SAVE.to_string()));
    vec
});

const BATTLE_PLAY: &str = "‚öî";
const BATTLE_ITEM: &str = "üíä";
const BATTLE_SAVE: &str = "‚úíÔ∏è";
const BATTLE_GUARD: &str = "\u{1F6E1}";

#[group]
#[commands(play, delete)]
pub struct General;

/// play
#[command]
#[description = "„Ç≤„Éº„É†„Çí„Éó„É¨„Ç§„Åô„Çã"]
pub async fn play(ctx: &serenity::client::Context, msg: &Message) -> CommandResult {
    if !msg.author.bot {
        let postgresql_config = config_parse_toml().await.postgresql_config();
        let userdata = match &postgresql_config {
            Some(f) => {
                let db_address = f.db_address.as_ref().unwrap();
                let dbconn = postgres_connect::connect(db_address)
                    .await
                    .expect("Invelid URL");
                Entity::find_by_id(msg.author.id.0.to_string())
                    .one(&dbconn)
                    .await?
            }
            None => None,
        };

        let battledata = match postgresql_config {
            Some(f) => {
                let db_address = f.db_address.unwrap();
                let dbconn = postgres_connect::connect(db_address)
                    .await
                    .expect("Invelid URL");
                match &userdata {
                    Some(m) => match m.battle_uuid {
                        Some(u) => PlaydataEntity::find_by_id(u).one(&dbconn).await?,
                        None => None,
                    },
                    None => None,
                }
            }
            None => None,
        };

        let mut battle = match battledata {
            Some(d) => {
                let builder: BattleBuilder = d.into();
                let battle = builder.build();
                msg.channel_id
                    .send_message(&ctx.http, |f| {
                        f.embed(|e| {
                            e.title(format!(
                                "{}„Å®„ÅÆ„Éê„Éà„É´„ÇíÂÜçÈñã„Åó„Åæ„Åô",
                                battle.enemy().charabase.name
                            ))
                            .description(format!("{}„Çø„Éº„É≥ÁõÆ„Åß„Åô", battle.elapesd_turns()))
                        })
                    })
                    .await?;
                battle
            }
            None => {
                let mut init = BattleBuilder::new(
                    PlayMode::Simple,
                    match &userdata {
                        Some(d) => Some(d.clone().into()),
                        None => None,
                    },
                    None,
                    None,
                );
                let battle_builder = init
                    .player(CharaConfig::chara_new("Reimu").await?)
                    .enemy_random(RandomOption::default())
                    .await
                    .clone();

                let battle = battle_builder.build();
                // Êïµ„ÅÆÂá∫Áèæ
                msg.channel_id
                    .send_message(&ctx.http, |f| {
                        f.embed(|e| {
                            e.title(format!(
                                "{enemy}{appear_enemy}",
                                enemy = &battle.enemy().charabase.name,
                                appear_enemy =
                                    i18n_text(Languages::Japanese).game_message.appear_enemy
                            ))
                            .description("ank".to_string())
                        })
                    })
                    .await?;
                battle
            }
        };

        let mut msg_embed = operation_enemy(ctx, msg, battle_reactions()).await?;

        if !battle.is_running() {
            loop {
                // „ÇÇ„ÅóÁµµÊñáÂ≠ó„Åå‰ªò„ÅÑ„Åü„ÇâË°å„ÅÜÂá¶ÁêÜ
                if let Some(reaction) = &msg_embed
                    .await_reaction(&ctx)
                    .timeout(Duration::from_secs(
                        config_parse_toml().await.timeout_duration().unwrap_or(10),
                    ))
                    .author_id(msg.author.id)
                    .await
                {
                    let emoji = &reaction.as_inner_ref().emoji;
                    let _ = match emoji.as_data().as_str() {
                        BATTLE_PLAY => {
                            let battle_clone = battle.clone();
                            let result = battle.result_battle().await;

                            if battle_clone.enemy().charabase.hp != result.enemy().charabase.hp
                                && result.enemy().charabase.hp > 0
                            {
                                msg.channel_id
                                    .send_message(&ctx.http, |f| {
                                        f.embed(|e| {
                                            let enemy = result.enemy();
                                            e.title(format!("Êïµ„ÅÆ„ÅÆ„Åì„Çähp{}", enemy.charabase.hp))
                                                .description(&enemy.charabase.name)
                                        })
                                    })
                                    .await
                                    .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")?;
                                battle.add_turn();

                                msg_embed = operation_enemy(&ctx, &msg, battle_reactions())
                                    .await
                                    .unwrap()
                            } else if battle_clone.player().charabase.hp
                                != result.player().charabase.hp
                                && result.player().charabase.hp > 0
                            {
                                msg.channel_id
                                    .send_message(&ctx.http, |f| {
                                        f.embed(|e| {
                                            let player = result.player();
                                            e.title(format!(
                                                "Âë≥Êñπ„ÅÆ„ÅÆ„Åì„Çähp{}",
                                                player.charabase.hp
                                            ))
                                            .description(&player.charabase.name)
                                        })
                                    })
                                    .await
                                    .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")?;
                                battle.add_turn();

                                msg_embed = operation_enemy(&ctx, &msg, battle_reactions())
                                    .await
                                    .unwrap()
                            } else if result.player().charabase.hp <= 0 {
                                msg.channel_id
                                    .send_message(&ctx.http, |f| {
                                        f.embed(|e| {
                                            e.title(format!(
                                                "{}„Å´ÂÄí„Åï„Çå„Å¶„Åó„Åæ„Å£„Åü",
                                                result.enemy().charabase.name
                                            ))
                                        })
                                    })
                                    .await
                                    .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")?;
                                break;
                            } else if result.enemy().charabase.hp <= 0 {
                                msg.channel_id
                                    .send_message(&ctx.http, |f| {
                                        f.embed(|e| {
                                            e.title(format!(
                                                "{}„ÇíÂÄí„Åó„Åü",
                                                result.enemy().charabase.name
                                            ))
                                        })
                                    })
                                    .await
                                    .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")?;
                                break;
                            } else {
                                break;
                            }
                        }
                        BATTLE_GUARD => {
                            guard_attack(&ctx, &msg).await.unwrap();
                            msg_embed = operation_enemy(&ctx, &msg, battle_reactions())
                                .await
                                .unwrap()
                        }
                        BATTLE_SAVE => match config_parse_toml().await.postgresql_config() {
                            Some(url) => {
                                let url_string = url.db_address.unwrap();
                                let dbconn = postgres_connect::connect(url_string)
                                    .await
                                    .expect("Invelid URL");

                                save(
                                    &dbconn,
                                    crate::database::save::Model {
                                        user_id: msg.author.id.0.to_string(),
                                        exp: match userdata.as_ref() {
                                            Some(e) => e.exp,
                                            None => 1,
                                        },
                                        level: match userdata.as_ref() {
                                            Some(l) => l.level,
                                            None => 1,
                                        },
                                        player: match userdata.as_ref() {
                                            Some(p) => p.player.clone(),
                                            None => "Reimu".to_string(),
                                        },
                                        battle_uuid: Some(battle.uuid()),
                                    },
                                )
                                .await;
                            }
                            None => {
                                error_embed_message(ctx, msg, "„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö„Åß„Åç„Åæ„Åõ„Çì")
                                    .await
                                    .unwrap();
                                break;
                            }
                        },
                        _ => {
                            break;
                        }
                    };
                }
            }
        }
    }

    Ok(())
}

#[command]
#[description = "„Çª„Éº„Éñ„Éá„Éº„Çø„ÇíÂâäÈô§„Åô„Çã"]
pub async fn delete(ctx: &serenity::client::Context, msg: &Message) -> CommandResult {
    let reactions = [
        ReactionType::Unicode("‚≠ï".to_string()),
        ReactionType::Unicode("‚ùå".to_string()),
    ];

    let question = msg
        .channel_id
        .send_message(&ctx.http, |f| {
            f.embed(|e| {
                e.title("Êú¨ÂΩì„Å´ÂâäÈô§„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åó„Çá„ÅÜ„ÅãÔºü")
                    .description("ÂâäÈô§„Åó„Åü„Éá„Éº„Çø„ÅØ‰∫åÂ∫¶„Å®Êàª„Å£„Å¶„Åç„Åæ„Åõ„Çì")
            })
            .reactions(reactions.into_iter())
        })
        .await
        .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")?;

    if let Some(reaction) = &question
        .await_reaction(&ctx)
        .timeout(Duration::from_secs(10))
        .author_id(msg.author.id)
        .await
    {
        let emoji = &reaction.as_inner_ref().emoji;
        match emoji.as_data().as_str() {
            "‚≠ï" => match config_parse_toml().await.postgresql_config() {
                Some(url) => {
                    let url_string = url.db_address.unwrap();
                    let dbconn = postgres_connect::connect(url_string)
                        .await
                        .expect("Invelid URL");
                    userdata_delete(&dbconn, *msg.author.id.as_u64()).await;
                }
                None => {
                    error_embed_message(ctx, msg, "„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö„Åß„Åç„Åæ„Åõ„Çì").await?;
                }
            },
            "‚ùå" => {
                msg.channel_id
                    .send_message(&ctx.http, |f| f.embed(|e| e.title("ÂâäÈô§„ÇíÂèñ„ÇäÊ∂à„Åó„Åæ„Åô")))
                    .await
                    .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")?;
            }
            _ => {
                error_embed_message(ctx, msg, "Ê≠£„Åó„ÅÑÂèçÂøú„ÇíÈÅ∏„Çì„Åß‰∏ã„Åï„ÅÑ").await?;
            }
        }
    }

    Ok(())
}

#[command]
#[description = "„Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÈÅ∏Êäû„Åó„Åæ„Åô"]
pub async fn set_chara(
    ctx: &serenity::client::Context,
    msg: &Message,
    mut arg: Args,
) -> CommandResult {
    let arg_str = arg.trimmed().current().context("Not found arg")?;
    let chara_data = todo!(); /* CharaBase::chara_new(&arg_str.to_string())
                              .await
                              .context("Invalid arg")?; */

    msg.channel_id
        .send_message(&ctx.http, |f| {
            f.embed(|e| {
                e.title(format!("„Ç≠„É£„É©„ÇØ„Çø„Éº„Çí{}„Å´Â§âÊõ¥„Åó„Åæ„Åó„Åü", arg_str))
                    .description(" ")
            })
        })
        .await
        .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")?;

    match config_parse_toml().await.postgresql_config() {
        Some(url) => {
            let url_string = url.db_address.unwrap();
            let dbconn = postgres_connect::connect(url_string)
                .await
                .expect("Invelid URL");
            update_player(&dbconn, msg.author.id.0, todo!()).await;
        }
        None => {
            error_embed_message(ctx, msg, "„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Êé•Á∂ö„Åß„Åç„Åæ„Åõ„Çì").await?;
        }
    }

    Ok(())
}
/// Êìç‰Ωú„ÅÆÂüã„ÇÅËæº„Åø
async fn operation_enemy(
    ctx: &serenity::client::Context,
    msg: &Message,
    reactions: Vec<ReactionType>,
) -> Result<Message, anyhow::Error> {
    msg.channel_id
        .send_message(&ctx.http, |f| {
            f.embed(|e| {
                e.title("„É™„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíÊäº„Åó„Å¶Êìç‰Ωú„Åó„Å¶„Å≠")
                    .description("meme")
            })
            .reactions(reactions.into_iter())
        })
        .await
        .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
}

async fn guard_attack(
    ctx: &serenity::client::Context,
    msg: &Message,
) -> Result<Message, anyhow::Error> {
    msg.channel_id
        .send_message(&ctx.http, |f| {
            f.embed(|e| e.title("{}„ÉÄ„É°„Éº„Ç∏„Çí„Åè„Çâ„Å£„Åü").description("{}%Èò≤Âæ°„Åó„Åü"))
        })
        .await
        .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
}

async fn error_embed_message<M: Into<String>>(
    ctx: &serenity::client::Context,
    msg: &Message,
    context: M,
) -> Result<Message, anyhow::Error> {
    msg.channel_id
        .send_message(&ctx.http, |f| {
            f.embed(|e| e.title("„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü").description(context.into()))
        })
        .await
        .context("Âüã„ÇÅËæº„Åø„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü")
}
